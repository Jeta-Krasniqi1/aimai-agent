import { type DataStoreRows, type DataStoreCreateColumnSchema, type DataStoreColumn } from '@n8n/api-types';
import { DslColumn } from '@n8n/db';
import type { DataSourceOptions } from '@n8n/typeorm';
import type { DataStoreUserTableName } from '../data-store.types';
export declare function toDslColumns(columns: DataStoreCreateColumnSchema[]): DslColumn[];
export declare function addColumnQuery(tableName: DataStoreUserTableName, column: DataStoreCreateColumnSchema, dbType: DataSourceOptions['type']): string;
export declare function deleteColumnQuery(tableName: DataStoreUserTableName, column: string, dbType: DataSourceOptions['type']): string;
export declare function buildInsertQuery(tableName: DataStoreUserTableName, rows: DataStoreRows, columns: Array<{
    name: string;
    type: string;
}>, dbType?: DataSourceOptions['type']): [string, unknown[]];
export declare function buildUpdateQuery(tableName: DataStoreUserTableName, row: Record<string, unknown>, columns: Array<{
    name: string;
    type: string;
}>, matchFields: string[], dbType?: DataSourceOptions['type']): [string, unknown[]];
export declare function splitRowsByExistence(existing: Array<Record<string, unknown>>, matchFields: string[], rows: DataStoreRows): {
    rowsToInsert: DataStoreRows;
    rowsToUpdate: DataStoreRows;
};
export declare function quoteIdentifier(name: string, dbType: DataSourceOptions['type']): string;
export declare function toTableName(dataStoreId: string): DataStoreUserTableName;
export declare function normalizeRows(rows: DataStoreRows, columns: DataStoreColumn[]): {
    [x: string]: import("@n8n/api-types").DataStoreColumnJsType | null;
}[];
export declare function getPlaceholder(index: number, dbType: DataSourceOptions['type']): string;
