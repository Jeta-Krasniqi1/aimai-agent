import type { ListDataStoreContentQueryDto, DataStoreUserTableName, DataStoreRows, UpsertDataStoreRowsDto } from '@n8n/api-types';
import { DataSource, DataSourceOptions, EntityManager, QueryRunner } from '@n8n/typeorm';
import { DataStoreColumn } from './data-store-column.entity';
export declare class DataStoreRowsRepository {
    private dataSource;
    constructor(dataSource: DataSource);
    insertRows(tableName: DataStoreUserTableName, rows: DataStoreRows, columns: DataStoreColumn[]): Promise<boolean>;
    upsertRows(tableName: DataStoreUserTableName, dto: UpsertDataStoreRowsDto, columns: DataStoreColumn[]): Promise<boolean>;
    deleteRows(tableName: DataStoreUserTableName, ids: number[]): Promise<boolean>;
    createTableWithColumns(tableName: string, columns: DataStoreColumn[], queryRunner: QueryRunner): Promise<void>;
    ensureTableAndAddColumn(dataStoreId: string, column: DataStoreColumn, queryRunner: QueryRunner, dbType: DataSourceOptions['type']): Promise<void>;
    dropColumnFromTable(dataStoreId: string, columnName: string, em: EntityManager, dbType: DataSourceOptions['type']): Promise<void>;
    getManyAndCount(dataStoreId: DataStoreUserTableName, dto: ListDataStoreContentQueryDto): Promise<{
        count: number;
        data: DataStoreRows;
    }>;
    getRowIds(dataStoreId: DataStoreUserTableName, dto: ListDataStoreContentQueryDto): Promise<number[]>;
    private getManyQuery;
    private applyFilters;
    private applySorting;
    private applySortingByField;
    private applyPagination;
    private fetchAndSplitRowsByExistence;
}
